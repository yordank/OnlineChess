 



<!-- start example HTML --->
<script src="./../chessboardjs-0.3.0/js/chess.js"></script>
<div id="board" style="width: 400px"></div>
<p>Status: <span id="status"></span></p>
<p>FEN: <span id="fen"></span></p>
<p>PGN: <span id="pgn"></span></p>
<!-- end example HTML --->

<script src="./../chessboardjs-0.3.0/js/json3.min.js"></script>
<script src="./../chessboardjs-0.3.0/js/jquery-1.10.1.min.js"></script>
<script src="./../chessboardjs-0.3.0/js/chessboard-0.3.0.js"></script>

<script>
var init = function() {

//--- start example JS ---
var onChange = function(oldPos, newPos) {
  console.log("Position changed:");
  console.log("Old position: " + ChessBoard.objToFen(oldPos));
  console.log("New position: " + ChessBoard.objToFen(newPos));
  console.log("--------------------");

  $.connection.hub.start().done(function () {
      
          // Call the Send method on the hub.
          chat.server.send($('#displayname').val(), ChessBoard.objToFen(newPos));
          // Clear text box and reset focus for next comment.
          $('#message').val('').focus();
   
  });

};
var board,
  game = new Chess(),
  statusEl = $('#status'),
  fenEl = $('#fen'),
  pgnEl = $('#pgn');

    // do not pick up pieces if the game is over
    // only pick up pieces for the side to move
var onDragStart = function (source, piece, position, orientation) {
    if (game.game_over() === true ||
        (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
        (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
        return false;
    }
};

var onDrop = function (source, target) {
    // see if the move is legal
    var move = game.move({
        from: source,
        to: target,
        promotion: 'q' // NOTE: always promote to a queen for example simplicity
    });
    
    // illegal move
    if (move === null) return 'snapback';

    updateStatus();

    $.connection.hub.start().done(function () {

        // Call the Send method on the hub.
        chat.server.send($('#displayname').val(), game.fen());
        // Clear text box and reset focus for next comment.
        $('#message').val('').focus();

    });

    

};

    // update the board position after the piece snap 
    // for castling, en passant, pawn promotion
var onSnapEnd = function () {
    board.position(game.fen());
};

var updateStatus = function () {
    var status = '';

    var moveColor = 'White';
    if (game.turn() === 'b') {
        moveColor = 'Black';
    }

    // checkmate?
    if (game.in_checkmate() === true) {
        status = 'Game over, ' + moveColor + ' is in checkmate.';
    }

        // draw?
    else if (game.in_draw() === true) {
        status = 'Game over, drawn position';
    }

        // game still on
    else {
        status = moveColor + ' to move';

        // check?
        if (game.in_check() === true) {
            status += ', ' + moveColor + ' is in check';
        }
    }

    statusEl.html(status);

    fenEl.html(game.fen());
    pgnEl.html(game.pgn());
 


};


var cfg = {
    draggable: true,
    position: 'start',
    onDragStart: onDragStart,
    onDrop: onDrop,
    onSnapEnd: onSnapEnd//,
    //onChange: onChange
};
var board = ChessBoard('board', cfg);
var chat = $.connection.chatHub;
$('#startPositionBtn').on('click', board.start);

updateStatus();
//--- end example JS ---



$(function () {
    // Reference the auto-generated proxy for the hub.
    
    // Create a function that the hub can call back to display messages.
    chat.client.addNewMessageToPage = function (name, message) {
        // Add the message to the page.
      //  $('#discussion').append('<li><strong>' + htmlEncode(name)
        //    + '</strong>: ' + htmlEncode(message) + '</li>');
        
        board.position(message);
        
        game.load(message);
         
        updateStatus();
    };
    // Get the user name and store it to prepend to messages.

    // $('#displayname').val(prompt('Enter your name:', ''));



    $('#displayname').val('@HttpContext.Current.User.Identity.Name.ToString()');




    // Set initial focus to message input box.
    $('#message').focus();
    // Start the connection.
    $.connection.hub.start().done(function () {
        $('#sendmessage').click(function () {
            // Call the Send method on the hub.
            chat.server.send($('#displayname').val(), $('#message').val());
            // Clear text box and reset focus for next comment.
            $('#message').val('').focus();
        });
    });
});
    // This optional function html-encodes messages for display in the page.
function htmlEncode(value) {
    var encodedValue = $('<div />').text(value).html();
    return encodedValue;
}



}; // end init()
$(document).ready(init);
</script>


<h2>Chess</h2>
<!--<div class="container">-->
 <!--   <input type="text" id="message" /> -->
 <!--   <input type="button" id="sendmessage" value="Send" /> -->
<!--    <input type="hidden" id="displayname" />-->
 <!--   <ul id="discussion"></ul>-->
<!--   </div> -->
 
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
       
    </script>
}
 

 

<!-- start example HTML --->
<script src="./../chessboardjs-0.3.0/js/chess.js"></script>



<script>


    var MyTime =@ViewBag.clockSeconds  ;
    var OpponentTime =@ViewBag.clockSeconds  ;

    var My_Time;
    var Opponent_Time;

var MyTimeFunc=function (){
     MyTime --;
    // Output the result in an element with id="demo"
    document.getElementById("MyClock").innerHTML = Math.floor(MyTime / 60) + ":" + MyTime%60;
    // If the count down is over, write some text
    if (MyTime < 0) {
        clearInterval(My_Time);
        document.getElementById("MyClock").innerHTML = "EXPIRED";
    }
}


var OpponentTimeFunc=function (){
     OpponentTime --;
    // Output the result in an element with id="demo"
    document.getElementById("OpponentClock").innerHTML = Math.floor(OpponentTime / 60) + ":" + OpponentTime%60;
    // If the count down is over, write some text
    if (OpponentTime < 0) {
        clearInterval(Opponent_Time);
        document.getElementById("OpponentClock").innerHTML = "EXPIRED";
    }
}
// Set the date we're counting down to


// Update the count down every 1 second
 //My_Time = setInterval(MyTimeFunc, 1000);
 //Opponent_Time = setInterval(OpponentTimeFunc, 1000);


function setTime(newTime,user)
{
    if(user==="Me")
	MyTime=newTime;
	if(user==="Opponent")
	OpponentTime=newTime;
}

function startTime(user)
{
    if(user==="Me")
	{
	  My_Time = setInterval(MyTimeFunc, 1000);
	}

	if(user==="Opponent")
	{
	  Opponent_Time = setInterval(OpponentTimeFunc, 1000);
	}


}
function stopTime(user)
{
		if(user==="Me")
		{
         clearInterval(My_Time);
	    }
		if(user==="Opponent")
		{
		 clearInterval(Opponent_Time);
		}
}
</script>








<div class="container">
    <div class="row">
        
       


        <div class="col-md-6 cols-xs-12 ">
      
            <div class="row" id="Opponent" style="text-align: center; font-size: 30px;">
            
                 <p id="OpponentClock"></p> 
                </div>
            
            <div class="row" >
                <div id="board" style="width: 100%"></div>
             </div>

            <div class="row" id="Me" style="text-align: center; font-size: 30px;">
           
                <p id="MyClock"></p> 
            </div>

            <div class="row">
                <p>Status: <span id="status"></span></p>
                </div>
            </div>
        <div class="col-md-3 cols-xs-12 ">
          
     
            
            <div class="row text-center">
                <input type="text" id="message" />
                <input type="button" id="sendmessage" value="Send" />
                <input type="hidden" id="displayname" />
                <ul id="discussion"></ul>   
            </div>
            
            


        </div>

        
       

         
        

    </div>
</div>
 
<!--<p>FEN: <span id="fen"></span></p>-->
<!--<p>PGN: <span id="pgn"></span></p>-->
<!-- end example HTML --->

<script src="./../chessboardjs-0.3.0/js/json3.min.js"></script>
<script src="./../chessboardjs-0.3.0/js/jquery-1.10.1.min.js"></script>
<script src="./../chessboardjs-0.3.0/js/chessboard-0.3.0.js"></script>









<script>
var init = function() {

//--- start example JS ---
var onChange = function(oldPos, newPos) {
  console.log("Position changed:");
  console.log("Old position: " + ChessBoard.objToFen(oldPos));
  console.log("New position: " + ChessBoard.objToFen(newPos));
  console.log("--------------------");

  /*$.connection.hub.start().done(function () {

          // Call the Send method on the hub.
          chat.server.send($('#displayname').val(), ChessBoard.objToFen(newPos));
          // Clear text box and reset focus for next comment.
          $('#message').val('').focus();

  });*/

};
var board,
  game = new Chess(),
  status = '',
  whitePlayer = '@ViewBag.white',
  blackPlayer= '@ViewBag.black',
  statusEl = $('#status'),
  fenEl = $('#fen'),
  pgnEl = $('#pgn');


    //alert(whitePlayer+" "+blackPlayer);

    // do not pick up pieces if the game is over
    // only pick up pieces for the side to move
var onDragStart = function (source, piece, position, orientation) {
    if (game.game_over() === true ||
        (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
        (game.turn() === 'b' && piece.search(/^w/) !== -1) ||
        (game.turn() ==='b'  && cfg.orientation=='white')||
        (game.turn() ==='w'  && cfg.orientation=='black')

        ) {
        return false;
    }
};

var onDrop = function (source, target) {
    // see if the move is legal
    var move = game.move({
        from: source,
        to: target,
        promotion: 'q' // NOTE: always promote to a queen for example simplicity
    });

    // illegal move
    if (move === null) return 'snapback';




  


    startTime("Opponent");
    stopTime("Me");
   
    updateStatus();

    $.connection.hub.start().done(function () {
        $('#displayname').val('@HttpContext.Current.User.Identity.Name.ToString()');
        // Call the Send method on the hub.

        //var lastmove = game.history()[game.history().length - 1];
        //var move = lastmove.from + '-' + lastmove.to;


        chat.server.send(whitePlayer,blackPlayer,'@ViewBag.orientation',game.fen(), status);



        //alert(lastmove);
        // Clear text box and reset focus for next comment.
        // $('#message').val('').focus();
        //alert(move);

    });



};

    function set_turn(chess, color) {
        var tokens = chess.fen().split(' ');
        tokens[1] = color;
        chess.load(tokens.join(' '));
    }
    // update the board position after the piece snap
    // for castling, en passant, pawn promotion
var onSnapEnd = function () {
    board.position(game.fen());
};

var updateStatus = function () {
    status = '';

    var moveColor = 'White';
    if (game.turn() === 'b') {
        moveColor = 'Black';
    }

    // checkmate?
    if (game.in_checkmate() === true) {
        status = 'Game over, ' + moveColor + ' is in checkmate.';
        
        stopTime("Me");
        
        stopTime("Opponent");

    }

        // draw?
    else if (game.in_draw() === true  || game.in_threefold_repetition()===true || game.in_stalemate()===true) {
        status = 'Game over, drawn position.';
       
        stopTime("Me");
        
        stopTime("Opponent");

    }


        // game still on
    else {
        status = moveColor + ' to move';

        // check?
        if (game.in_check() === true) {
            status += ', ' + moveColor + ' is in check';
        }
    }

    statusEl.html(status);

   // fenEl.html(game.fen());
   // pgnEl.html(game.pgn());



};


var cfg = {
    draggable: true,
    position: 'start',
    orientation: '@ViewBag.orientation',
    onDragStart: onDragStart,
    onDrop: onDrop,
    onSnapEnd: onSnapEnd//,
    //onChange: onChange
};
    var board = ChessBoard('board', cfg);
   // $(window).resize(board.resize);
var chat = $.connection.chatHub;
$('#startPositionBtn').on('click', board.start);

updateStatus();
//--- end example JS ---



$(function () {
    // Reference the auto-generated proxy for the hub.

    // Create a function that the hub can call back to display messages.
    chat.client.getOpponentMove = function (jsonChessGameMove) {
        // Add the message to the page.
      //  $('#discussion').append('<li><strong>' + htmlEncode(name)
        //    + '</strong>: ' + htmlEncode(message) + '</li>');
        var jsonObj = JSON.parse(jsonChessGameMove);

        //alert("timeWhite:" + jsonObj.TimeWhite + " timeBlack" + jsonObj.TimeBlack);





        board.position(jsonObj.Data);
        //board.move(jsonObj.Data);



        game.load(jsonObj.Data);
        //game.move(jsonObj.Data, { sloppy: true });


       


        stopTime("Opponent");
        startTime("Me");

        if(whitePlayer=='@HttpContext.Current.User.Identity.Name.ToString()')
        {
            setTime(jsonObj.TimeWhite,"Me");
            setTime(jsonObj.TimeBlack,"Opponent");

        }

        else
        {
            setTime(jsonObj.TimeBlack,"Me");
            setTime(jsonObj.TimeWhite,"Opponent");
        }

        updateStatus();
         

    };
    // Get the user name and store it to prepend to messages.

    // $('#displayname').val(prompt('Enter your name:', ''));



    $('#displayname').val('@HttpContext.Current.User.Identity.Name.ToString()');


    chat.client.addNewMessageToPage = function (name, message,flag) {
        // Add the message to the page.
        if (flag == 0) {
            $('#discussion').append('<li><strong>' + htmlEncode(name)
                + '</strong>: ' + htmlEncode(message) + '</li>');
        }

        if(flag==1){
            
            status = message;
            statusEl.html(status);

            stopTime("Me");
            stopTime("Opponent");

        }




    };

    // Set initial focus to message input box.
  //  $('#message').focus();
    // Start the connection.
    $.connection.hub.start().done(function () {
        $('#sendmessage').click(function () {
            // Call the Send method on the hub.
            chat.server.chatsend('@ViewBag.white','@ViewBag.black', $('#message').val());
            // Clear text box and reset focus for next comment.
            $('#message').val('').focus();
        });
    });
});
    // This optional function html-encodes messages for display in the page.
function htmlEncode(value) {
    var encodedValue = $('<div />').text(value).html();
    return encodedValue;
}



}; // end init()
$(document).ready(init);
</script>


 







<h2>Chess</h2>
<!--<div class="container">-->
 <!--   <input type="text" id="message" /> -->
 <!--   <input type="button" id="sendmessage" value="Send" /> -->
<!--    <input type="hidden" id="displayname" />-->
 <!--   <ul id="discussion"></ul>-->
<!--   </div> -->

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->

}